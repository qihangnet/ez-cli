import { parseArgs } from "@std/cli/parse-args";
import * as colors from "@std/fmt/colors";
import * as p from "@clack/prompts";
import { Command } from "../types/Command.ts";
import { exeName } from "../helpers/app.ts";
import i18n from "../helpers/i18n.ts";
import { getConfig } from "../helpers/config.ts";
import { shell } from "../helpers/shell.ts";
import ai from "../helpers/ai.ts";

export const CommitCommand: Command = {
  name: "commit",
  help: {
    description: i18n.t("Commit changes to the git repository by AI"),
    examples: [
      `${exeName} commit`,
      `${exeName} commit --lang "en" --notes "This is a note"`,
    ],
  },
  action: async (args: string[]) => {
    const spin = p.spinner();

    const config = await getConfig();

    // Parse command line arguments
    const parsedArgs = parseArgs(args, {
      string: ["lang", "notes", "m"],
      default: { lang: config.LANGUAGE, notes: "", m: "" },
    });

    // If manual commit message provided, use it directly
    if (parsedArgs.m) {
      spin.start(i18n.t("Committing changes..."));
      await commitChanges(parsedArgs.m);
      spin.stop(i18n.t("Commit complete"));
      p.note(parsedArgs.m, i18n.t("Commit message"));
      return;
    }

    spin.start(i18n.t("Checking working directory status..."));
    const status = await shell.run(["git", "status", "--short"]);
    spin.stop(i18n.t("Git status:"));
    shell.writeLine();
    shell.writeLine(status);
    shell.writeLine();
    shell.writeLine(colors.dim("‚Ä¢"));

    const diff = await getGitDiff();
    if (!diff) {
      p.cancel(i18n.t("No changes found."));
      Deno.exit(0);
    }

    spin.start(i18n.t("Generating commit message..."));
    let commitMessage = await generateCommitMessage(
      config,
      parsedArgs,
      diff,
    );

    if (!commitMessage) {
      p.cancel(i18n.t("Unable to generate commit message."));
      Deno.exit(1);
    }
    spin.stop(i18n.t("Commit message generated by AI:"));
    shell.writeLine();
    shell.writeLine(commitMessage);
    shell.writeLine();
    shell.writeLine(colors.dim("‚Ä¢"));

    let action = await p.select({
      message: i18n.t("What would you like to do?"),
      options: [
        { value: "commit", label: "‚úÖ " + i18n.t("Commit with this message") },
        // { value: "regenerate", label: "Regenerate commit message" },
        { value: "edit", label: "üìù " + i18n.t("Edit commit message") },
        { value: "cancel", label: "‚ùå " + i18n.t("Cancel commit") },
      ],
    });

    if (action === "cancel") {
      p.cancel(i18n.t("Commit cancelled."));
      Deno.exit(1);
    }

    // if (action === "regenerate") {
    //   // Re-run the generation
    //   spin.start("Regenerating commit message...");
    //   const commitMessage = await generateCommitMessage(
    //     openai,
    //     config,
    //     parsedArgs,
    //     diff,
    //   );

    //   return;
    // }

    if (action === "edit") {
      const editedMessage = await p.text({
        message: i18n.t("Edit commit message (only the first line):"),
        initialValue: commitMessage.split("\n")[0],
      });
      if (!editedMessage) {
        p.cancel(i18n.t("No commit message provided."));
        Deno.exit(1);
      }
      commitMessage = editedMessage as string;
      action = "commit";
    }

    if (action === "commit") {
      spin.start(i18n.t("Committing changes..."));
      await commitChanges(commitMessage);
      spin.stop(i18n.t("Commit complete"));
    }

    Deno.exit(0);
  },
};

/**
 * Get git diff of both working directory and staged changes
 * @returns Promise resolving to combined diff output
 */
async function getGitDiff(): Promise<string> {
  const workingDiff = await shell.run(["git", "diff"]);
  const stagedDiff = await shell.run(["git", "diff", "--cached"]);
  return workingDiff + stagedDiff;
}

/**
 * Stage all changes and create a commit with given message
 * @param message Commit message to use
 */
async function commitChanges(message: string): Promise<void> {
  await shell.run(["git", "add", "."]);
  await shell.run(["git", "commit", "-m", message]);
}

/**
 * Generate a commit message using OpenAI
 * @param config Configuration object
 * @param parsedArgs Parsed command line arguments
 * @param diff Git diff output
 */
async function generateCommitMessage(
  config: { MODEL?: string },
  parsedArgs: { lang: string; notes: string },
  diff: string,
): Promise<string | null> {
  const content = await ai.generateChatCompletion({
    model: config.MODEL || "gpt-4o-mini",
    messages: [
      {
        role: "user",
        content:
          `Analyze the following code changes and generate a concise Git commit message, providing it in the following languages: ${parsedArgs.lang}. Text only: \n\n${diff}\n\n ${parsedArgs.notes} \n\n`,
      },
    ],
    max_tokens: 500,
    temperature: 0.7,
  });
  return content;
}
